<?php
/**
 * @file
 *
 */

require('theme/tripal_galaxy.theme.inc');
require('api/tripal_galaxy.api.inc');
require('includes/tripal_galaxy.form_elements.inc');

/**
 * Implementation of hook_init()
 */
function tripal_galaxy_init() {
  global $user;

  $library = libraries_detect('blend4php');
  if (user_access('administer galaxy', $user)) {
    if (!$library) {
      drupal_set_message(t('The blend4php library is not installed. The Galaxy module requires it.'), 'warning');
    }
  }
}


/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function tripal_galaxy_libraries_info() {

  // A very simple library. No changing APIs (hence, no versions), no variants.
  // Expected to be extracted into 'sites/all/libraries/simple'.
  $libraries['blend4php'] = [
    'name' => 'blend4php',
    'vendor url' => 'https://github.com/galaxyproject/blend4php',
    'download url' => 'https://github.com/galaxyproject/blend4php',
    'version arguments' => [
      'file' => 'version.txt',
      'pattern' => '/^(.*)$/',
      'lines' => 1,
    ],
    'files' => [
      'php' => ['galaxy.inc'],
    ],
  ];

  return $libraries;
}


/**
 * Implementation of hook_permissions()
 *
 * Set the permission types that this module uses.
 *
 * @ingroup tripal_file
 */
function tripal_galaxy_permission() {
  return [
    'use galaxy' => [
      'title' => t('Execute Published Galaxy Workflows'),
      'description' => t('Allows a user to submit a published workflow for execution on a remote Galaxy Instance'),
    ],
    'administer galaxy' => [
      'title' => t('Administer Galaxy'),
      'description' => t('Allows a user to configure site-wide default Galaxy instances.'),
    ],
  ];
}

/**
 * Implements hook_menu()
 *
 * Specifies menu items and URLs used by this module.
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_menu() {
  $items = [];

  // EXPLANATION: all extension modules should have an administrative menu item
  // with the path set to 'admin/tripal/extension/[module name]'.
  $items['admin/tripal/extension/galaxy'] = [
    'title' => 'Galaxy',
    'description' => 'Integrate workflows from a remote Galaxy instance with this Tripal site',
    'page callback' => 'tripal_galaxy_admin_home',
    'access arguments' => ['administer galaxy'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
  ];

  // Edit Galaxy
  $items['admin/tripal/extension/galaxy/edit/%'] = [
    'description' => 'Edit a galaxy instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_galaxy_admin_configuration_form', 5],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin_configuration_form.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
  ];

  // Test Galaxy
  $items['admin/tripal/extension/galaxy/test/%'] = [
    'description' => 'Test a galaxy instance',
    'page callback' => 'tripal_galaxy_admin_test_server',
    'page arguments' => [5],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
  ];

  // Disable workflows for this Galaxy
  $items['admin/tripal/extension/galaxy/disable/%'] = [
    'description' => 'Disable all workflows for this galaxy server',
    'page callback' => 'tripal_galaxy_admin_disable_workflows',
    'page arguments' => [5],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
  ];

  // Enable workflows for this Galaxy
  $items['admin/tripal/extension/galaxy/enable/%'] = [
    'description' => 'Enable all workflows for this galaxy server',
    'page callback' => 'tripal_galaxy_admin_enable_workflows',
    'page arguments' => [5],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
  ];

  // Add Galaxy
  $items['admin/tripal/extension/galaxy/add'] = [
    'description' => 'Add a galaxy server instance',
    'title' => 'Add Galaxy Instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_galaxy_admin_configuration_form'],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/tripal_galaxy.admin_configuration_form.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
  ];

  $items['admin/tripal/extension/galaxy/delete/%'] = [
    'description' => 'Delete a galaxy server instance',
    'title' => 'Delete Galaxy Instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_galaxy_admin_delete_galaxy_instance_form', 5],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin_configuration_form.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
  ];

  // Available Workflows
  $items['admin/tripal/extension/galaxy/workflows'] = [
    'title' => 'Workflows',
    'description' => 'Lists the available Workflows of the user',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_galaxy_admin_workflows_form'],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.admin_workflow_form.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 5,
  ];
  // Add Workflows
  $items['admin/tripal/extension/galaxy/workflows/add'] = [
    'title' => 'Add Workflows',
    'description' => 'Add workflows to the site given the remote galaxy instance',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_galaxy_admin_add_workflow_form'],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/tripal_galaxy.admin_workflow_form_add.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
  ];

  // Remove Workflows
  $items['admin/tripal/extension/galaxy/workflows/remove/%'] = [
    'description' => 'Remove a workflow from site',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_galaxy_admin_confirm_remove_workflow_form', 6],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 10,
  ];

    // Disable Workflows
  $items['admin/tripal/extension/galaxy/workflows/disable/%'] = [
    'description' => 'Disable this workflow',
    'page callback' => 'tripal_galaxy_admin_disable_workflow',
    'page arguments' => [6],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 10,
  ];

    // Enable Workflows
  $items['admin/tripal/extension/galaxy/workflows/enable/%'] = [
    'description' => 'Enable this workflow',
    'page callback' => 'tripal_galaxy_admin_enable_workflow',
    'page arguments' => [6],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 10,
  ];


  // Admin submission report.
  $items['admin/tripal/extension/galaxy/workflows/report/%'] = [
    'title' => 'Workflow Submission Details',
    'description' => 'The report for a submitted workflow.',
    'page callback' => 'tripal_galaxy_submission_admin_report',
    'page arguments' => [6],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 10,
  ];

  //
  // USER SUBMITTED WORKFLOW JOBS
  //
  // User submission report.
  $items['user/%/galaxy-jobs/%'] = [
    'title' => 'Analysis Results',
    'description' => 'The results for a submitted analysis.',
    'page callback' => 'tripal_galaxy_submission_user_report',
    'page arguments' => [3],
    'access arguments' => ['use galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.user.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 10,
  ];

  // User report page
  $items['user/%/galaxy-jobs/%/results'] = [
    'title' => 'Workflow Submission Files',
    'description' => 'The files from a submitted workflow.',
    'page callback' => '',
    'page arguments' => [3],
    'access arguments' => ['use galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 10,
  ];

  // Usage
  $items['admin/tripal/extension/galaxy/usage'] = [
    'title' => 'Usage',
    'description' => 'View Usage of Galaxy Workflows',
    'page callback' => 'tripal_galaxy_admin_usage_page',
    'access arguments' => ['administer galaxy'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.admin_usage.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 20,
  ];

  //
  // SITE-WIDE FILES
  //
  $items['admin/tripal/extension/galaxy/files'] = [
    'title' => 'Files',
    'description' => t('Files available site-wide for workflows.'),
    'page callback' => 'tripal_galaxy_admin_manage_files',
    'access arguments' => ['administer galaxy'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_galaxy.admin_files.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
    'weight' => 40,
  ];
  $items['admin/tripal/extension/galaxy/files/add'] = [
    'title' => 'Add a New File',
    'description' => t('Files available site-wide for workflows.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_galaxy_admin_add_file_form'],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/tripal_galaxy.admin_files.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
  ];
  $items['admin/tripal/extension/galaxy/files/disable/%'] = [
    'description' => "Disable a file.",
    'page callback' => 'tripal_galaxy_admin_disable_file',
    'page arguments' => [6],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin_files.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
  ];
  $items['admin/tripal/extension/galaxy/files/enable/%'] = [
    'description' => "Enable a file.",
    'page callback' => 'tripal_galaxy_admin_enable_file',
    'page arguments' => [6],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin_files.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
  ];
  $items['admin/tripal/extension/galaxy/files/edit/%'] = [
    'title' => t('Edit File Details'),
    'description' => "Edit a site-wide file.",
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_galaxy_admin_edit_file_form', 6],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin_files.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
  ];
  $items['admin/tripal/extension/galaxy/files/delete/%'] = [
    'title' => t('Delete File'),
    'description' => "Deletes a site-wide file.",
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_galaxy_admin_delete_file_form', 6],
    'access arguments' => ['administer galaxy'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_galaxy.admin_files.inc',
    'file path' => drupal_get_path('module', 'tripal_galaxy'),
  ];

  $items['galaxy/proxy/%'] = [
    'title' => 'Results Viewer',
    'page callback' => 'tripal_galaxy_stream_url_proxy',
    'page arguments' => [2],
    'access arguments' => ['use galaxy'],
    'type' => MENU_CALLBACK,
  ];
  $items['galaxy/viewer/%'] = [
    'title' => 'Results Viewer',
    'page callback' => 'tripal_galaxy_results_viewer_page',
    'page arguments' => [2],
    'access arguments' => ['use galaxy'],
    'type' => MENU_CALLBACK,
  ];
  $items['galaxy/viewer-full/%'] = [
    'title' => 'Results Viewer',
    'page callback' => 'tripal_galaxy_results_viewer_full_page',
    'page arguments' => [2],
    'access arguments' => ['use galaxy'],
    'type' => MENU_CALLBACK,
  ];
  $items['galaxy/download/%'] = [
    'title' => 'Download',
    'page callback' => 'tripal_galaxy_results_download',
    'page arguments' => [2],
    'access arguments' => ['use galaxy'],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}


/**
 * Implements hook_admin_paths_alter().
 */
function tripal_galaxy_admin_paths_alter(&$paths) {
  $paths['galaxy/viewer*'] = TRUE;
}

/**
 * Implements hook_views_api()
 *
 * This hook tells drupal that there is views support for
 * for this module which then automatically includes the tripal_db.views.inc
 * where all the views integration code is found.
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_views_api() {
  return [
    'api' => 3.0,
  ];
}

/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup tripal_galaxy
 */
function tripal_galaxy_theme($existing, $type, $theme, $path) {
  $items = [
    'html__galaxy__viewer_full' => [
      'template' => 'html--galaxy--viewer-full',
      'render element' => 'html',
      'base hook' => 'html',
      'path' => drupal_get_path('module', 'tripal_galaxy') . "/theme/templates",
    ],
    'page__galaxy__viewer_full' => [
      'template' => 'page--galaxy--viewer-full',
      'render element' => 'page',
      'base hook' => 'page',
      'path' => drupal_get_path('module', 'tripal_galaxy') . "/theme/templates",
    ],
    'tripal_galaxy_admin_add_workflow_form_rows' => [
      'render element' => 'form',
    ],
    'tripal_galaxy_admin_workflows_form_rows' => [
      'render element' => 'form',
    ],
  ];
  return $items;
}

/**
 * Implements hook_[form_id]_alter().
 *
 * Add a submit handler to the client webform form.
 */
function tripal_galaxy_form_webform_client_form_alter(&$form, &$form_state, $form_id) {

  $node = $form['#node'];
  $workflow = db_select('tripal_galaxy_workflow', 'tgw')
    ->fields('tgw')
    ->condition('nid', $node->nid)
    ->execute()
    ->fetchObject();
  if ($workflow and $workflow->status == 'Altered') {
    drupal_set_message('Unfortunately, this wokflow is deprecated and no longer
        avaliable for submissions.', 'error');
    tripal_set_message('This form is disabled because the workflow was
        altered on the remote Galaxy Instance and may be out of sync
        with this web form.  If you want to continue to offer this workflow
        to your site visitors, you will need to ' . l('add the workflow', 'admin/tripal/extension/galaxy/workflows') . ' again as a new web form on this site.',
      TRIPAL_ERROR);
    $form['actions']['next']['#disabled'] = TRUE;
  }
  else if ($workflow and $workflow->status == 'disabled') {
    drupal_set_message('Unfortunately, this wokflow is disabled and no longer
        avaliable for submissions.', 'error');
    tripal_set_message('This form is disabled you may ' . 
      l('enable the workflow here', 'admin/tripal/extension/galaxy') . '.',TRIPAL_ERROR);
    $form['actions']['next']['#disabled'] = true;
  }


  // Check if this particular webform really is a galaxy webform
  // At each 'turn of the page' of the particular webform this is being called
  if ($form['#node']->webform['components'][1]['form_key'] == 'galaxy_webform') {
    $form['#submit'][] = 'tripal_galaxy_webform_client_form_submit';
  }
}

/**
 * Implements submit function for the webform_client_form
 */
function tripal_galaxy_webform_client_form_submit($form, &$form_state) {
  global $user;

  // Don't do anything if the webform isn't finished being filled out.
  if ($form_state['webform_completed'] != TRUE) {
    return;
  }
  try {

    // Get the sub
    $sid = $form_state['storage']['details']['sid'];

    // Get the Galaxy server workflow ID from the form then
    // lookup our internal galaxy workflow ID.
    $workflow_id = $form['#node']->webform['components'][1]['extra']['workflow_id'];
    $workflow = db_select('tripal_galaxy_workflow', 'tgw')
      ->fields('tgw')
      ->condition('workflow_id', $workflow_id)
      ->execute()
      ->fetchObject();

    // To be implemented more properly once inputs are generated
    $data = [
      'sid' => $sid,
      'galaxy_workflow_id' => $workflow->galaxy_workflow_id,
      'errors' => '',
      'submit_date' => REQUEST_TIME,
      'status' => 'Waiting',
    ];

    // Now insert the submission into the database
    drupal_write_record('tripal_galaxy_workflow_submission', $data);

    // For any files that were uploaded we want to set the usage for those
    // so that they are mapped to the correct submission.
    foreach ($form_state['values']['submitted'] as $cid => $component) {
      if (is_array($component) and array_key_exists('html5_file_fid', $component)
        and $component['html5_file_fid']) {
        $file = file_load($component['html5_file_fid']);
        $form_key = $component['html5_file_table_key'];
        file_usage_add($file, 'tripal_galaxy', $form_key, $sid);
      }
    }

    $args = [$sid];
    $includes = [];
    $job_id = tripal_add_job("Galaxy Workflow #" . $sid, 'tripal_galaxy',
      'tripal_galaxy_invoke_workflow', $args, $user->uid, 10, $includes);
    if ($job_id) {
      drupal_set_message(t('Your job is successfully submitted to the job queue! You will be notified by email when your job begins and completes.'));
    }
    else {
      drupal_set_message(t('Your analysis workflow was successfully submitted, but the job could not be added. Please contact the site administrator to report this issue.', 'warning'));
    }
  } catch (Exception $e) {
    drupal_set_message(t('Could not complete workflow submission.  Please contact the web site administrator to report this issue.'), 'error');
    watchdog_exception('tripal_galaxy', $e);
  }

  drupal_goto('user/' . $user->uid . '/galaxy-jobs');
}

/**
 * A helper function for recursively building a values array.
 *
 * The values array is needed to invoke a Galaxy workflow.
 *
 * @param $values
 *   The array into which the value will be placed.
 * @param $input_full_name
 *   The full name of the input paramter.
 * @param $value
 *   The value to add to the array.
 */
function _tripal_galaxy_workflow_invoke_build_values(&$values, $input_full_name, $value) {
  // Pop the first name off the list.
  $names = explode('|', $input_full_name);
  $name = array_shift($names);

  // As long as we have names in our "name path" then recurse.
  if (count($names) > 0) {
    $temp = [];
    $next_name = implode("|", $names);
    $had_value = _tripal_galaxy_workflow_invoke_build_values($temp, $next_name, $value);
    if ($had_value) {
      $values[$name] = $temp;
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    if ($value) {
      $values[$name] = $value;
      return TRUE;
    }
    return FALSE;
  }
}


/**
 * Implements of hook_webform_component_info().
 *
 * Describes new components for webforms that Galaxy workflows will use.
 */
function tripal_galaxy_webform_component_info() {
  $components = [];
  $components['BDSS_file'] = [
    'label' => t('BDSS File'),
    'description' => t('Allows multiple paths (URL, upload, Tripal web services) that a file may be attached.'),
    'features' => [
      'csv' => TRUE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => TRUE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
      'conditional_action_set' => TRUE,
    ],
    'file' => 'includes/components/tripal_galaxy.BDSS_file.inc',
  ];
  $components['galaxy_sfile'] = [
    'label' => t('File'),
    'description' => t('Provides a single file for a Galaxy input.'),
    'features' => [
      'csv' => TRUE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => TRUE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
      'conditional_action_set' => TRUE,
    ],
    'file' => 'includes/components/tripal_galaxy.galaxy_sfile.inc',
  ];
  $components['galaxy_sflist'] = [
    'label' => t('List Files'),
    'description' => t('Provides a list of files for a Galaxy input.'),
    'features' => [
      'csv' => TRUE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => TRUE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
      'conditional_action_set' => TRUE,
    ],
    'file' => 'includes/components/tripal_galaxy.galaxy_sflist.inc',
  ];
  $components['galaxy_pflist'] = [
    'label' => t('List of Paired Files'),
    'description' => t('Provides a list of paired files for a Galaxy input.'),
    'features' => [
      'csv' => TRUE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => TRUE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
      'conditional_action_set' => TRUE,
    ],
    'file' => 'includes/components/tripal_galaxy.galaxy_pflist.inc',
  ];
  $components['fixed_value'] = [
    'label' => t('Fixed Value'),
    'description' => t('A fixed value set by the workflow programmer.'),
    'features' => [
      'csv' => TRUE,
      'email' => FALSE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => FALSE,
      'title_display' => FALSE,
      'title_inline' => FALSE,
      'conditional' => TRUE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
      'conditional_action_set' => TRUE,
    ],
    'file' => 'includes/components/tripal_galaxy.fixed_value.inc',
  ];
  return $components;
}

/**
 *
 */
function tripal_galaxy_webform_submission_presave($node, &$submission) {

  // Itereate through the components being submitted and remove non
  // needed elements added by our galaxy form elements.
  foreach ($submission->data as $cid => $data) {
    $component = db_select('webform_component', 'wc')
      ->fields('wc', ['type', 'form_key'])
      ->condition('cid', $cid)
      ->execute()
      ->fetchObject();

    if ($component->type == 'galaxy_sfile') {
      unset($submission->data[$cid]['uploader_fset']);
      unset($submission->data[$cid]['existing_fset']);
      unset($submission->data[$cid]['site_wide_fset']);

      // If we have a data collection then we need to copy the files out
      // of the data collection and into the Galaxy files.
      if (array_key_exists('data_collection_fset', $submission->data[$cid]) and
        $submission->data[$cid]['data_collection_fset']['data_collection']) {
        $fid = $submission->data[$cid]['data_collection_fset']['data_collection'];
        $file = file_load($fid);
        $site_dir = tripal_galaxy_get_files_dir();
        if (!$site_dir) {
          drupal_set_message('Could not access the data collection to the directory on the server for storing this file.  This analysis may not execute correctly.', 'error');
        }
        else {
          $file = file_copy($file, $site_dir . '/' . $file->filename);
          if (!$file) {
            drupal_set_message('Could not copy the data collection to the directory on the server for storing this file.  This analysis may not execute correctly.', 'error');
          }
          else {
            $submission->data[$cid]['data_collection'] = $file->fid;
            file_usage_add($file, 'tripal_galaxy', $component->form_key, 0);
          }
        }
      }
    }
    unset($submission->data[$cid]['data_collection_fset']);
    if ($component->type == 'galaxy_pfile') {
      unset($submission->data[$cid]['uploader_fset']);
      unset($submission->data[$cid]['existing_fset']);
      unset($submission->data[$cid]['site_wide_fset']);
    }
    if ($component->type == 'galaxy_pflist') {
      unset($submission->data[$cid]['uploader_fset']);
      unset($submission->data[$cid]['existing_fset']);
    }
    if ($component->type == 'galaxy_sflist') {
      unset($submission->data[$cid]['uploader_fset']);
      unset($submission->data[$cid]['existing_fset']);

    }
  }
}

/**
 * The report page for a galaxy workflow submission.
 *
 * @param  $sid
 *   The submission ID of the workflow.
 *
 */
function tripal_galaxy_workflow_report($sid) {

  if (!$sid) {
    return FALSE;
  }
  if (!is_numeric($sid)) {
    return FALSE;
  }

  // Create a galaxy logo clickable image.
  $galaxy_logo = l('<img src="' . url(drupal_get_path('module', 'tripal_galaxy') . '/theme/images/PoweredByGalaxy120.png') . '" border="0"></img>', "https://galaxyproject.org/", [
    'html' => TRUE,
    'attributes' => ['target' => '_blank'],
  ]);

  // Get the submission details.
  $query = db_select('tripal_galaxy_workflow_submission', 'tgws');
  $query->fields('tgws', [
    'sid',
    'galaxy_workflow_id',
    'status',
    'errors',
    'submit_date',
    'start_time',
    'end_time',
    'invocation_id',
  ]);
  $query->join('tripal_galaxy_workflow', 'tgw', 'tgw.galaxy_workflow_id = tgws.galaxy_workflow_id');
  $query->fields('tgw', ['nid', 'galaxy_id', 'workflow_id']);
  $query->condition('tgws.sid', $sid);
  $submission = $query->execute()->fetchObject();
  if (!$submission) {
    return FALSE;
  }

  $submission->errors = $submission->errors ? unserialize($submission->errors) : [];

  // Get the node that this workflow belongs to
  $node = node_load($submission->nid);

  // Does this user have access to this node?
  if (!node_access('view', $node)) {
    drupal_access_denied();
    module_invoke_all('exit');
    drupal_exit();
  }

  // Get the galaxy server
  $galaxy = db_select('tripal_galaxy', 'tg')
    ->fields('tg')
    ->condition('galaxy_id', $submission->galaxy_id)
    ->execute()
    ->fetchObject();

  // Before doing anything check that the history has not been deleted.
  $galaxy_instance = tripal_galaxy_get_connection($submission->galaxy_id);
  $history_name = tripal_galaxy_get_history_name($submission, $node);
  $error = [];
  $history = tripal_galaxy_get_history($galaxy_instance, $history_name, $error);

  if ($history['deleted'] === TRUE) {
    $content['deleted'] = [
      '#type' => 'item',
      '#title' => t('Results deleted from Galaxy Server'),
      '#description' => t('It appears this analysis result has been deleted from the galaxy server on which it was run. Please return to the previous page and delete this from your workflow listing.'),
    ];
    db_update('tripal_galaxy_workflow_submission')
      ->fields(array(
        'status' => 'deleted'
      ))
      ->condition('sid', $submission->sid)
      ->execute();
    return $content;
  }


  $headers = [];
  $rows = [];

  $rows[] = [
    [
      'data' => 'Workflow Name',
      'header' => TRUE,
      'width' => '25%',
    ],
    $node->title,
  ];
  if (user_access('administer galaxy')) {
    $rows[] = [
      [
        'data' => 'Submission ID',
        'header' => TRUE,
        'width' => '25%',
      ],
      $submission->sid,
    ];
    $rows[] = [
      [
        'data' => 'Workflow ID',
        'header' => TRUE,
        'width' => '25%',
      ],
      $submission->workflow_id,
    ];
    $rows[] = [
      [
        'data' => 'Invocation ID',
        'header' => TRUE,
        'width' => '25%',
      ],
      $submission->invocation_id,
    ];
  }
  $rows[] = [
    [
      'data' => 'Status',
      'header' => TRUE,
    ],
    $submission->status,
  ];
  $rows[] = [
    [
      'data' => 'Submission Date',
      'header' => TRUE,
    ],
    format_date($submission->submit_date),
  ];
  $rows[] = [
    [
      'data' => 'Start Time',
      'header' => TRUE,
    ],
    $submission->start_time ? format_date($submission->start_time) : '',
  ];
  $rows[] = [
    [
      'data' => 'End Time',
      'header' => TRUE,
    ],
    $submission->end_time ? format_date($submission->end_time) : '',
  ];

  $rows[] = [
    [
      'data' => 'Galaxy Server',
      'header' => TRUE,
    ],
    $galaxy->servername . '<br>' . $galaxy_logo,
  ];

  if ($submission->status == 'Error') {
    $content['status_message'] = [
      '#type' => 'markup',
      '#markup' => '<div class="messages error">' .
        t('This analysis failed to complete succesfully. See the report below for error and output logs.') .
        '</div>',
    ];
  }

  $content['analysis_name'] = [
    '#type' => 'item',
    '#title' => 'Analysis Name',
    '#markup' => $node->title,
  ];

  $content['submission_details'] = [
    '#type' => 'fieldset',
    '#title' => t('Submission Details'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#attributes' => [
      'class' => ['collapsible', 'collapsed'],
    ],
    '#attached' => [
      'js' => ['misc/collapse.js', 'misc/form.js'],
    ],
  ];

  $content['submission_details']['table'] = [
    '#type' => 'markup',
    '#markup' => theme_table([
      'header' => $headers,
      'rows' => $rows,
      'attributes' => [],
      'sticky' => FALSE,
      'caption' => '',
      'colgroups' => [],
      'empty' => '',
    ]),
  ];

  $rows = [];

  $galaxy_server = db_select('tripal_galaxy', 'tg')
    ->fields('tg')
    ->condition('galaxy_id', $submission->galaxy_id)
    ->execute()
    ->fetchObject();

  $galaxy = tripal_galaxy_get_connection($submission->galaxy_id);

  $content['results'] = [
    '#type' => 'item',
    '#title' => t('Results'),
    '#description' => t('Each step in the workflow may have results of its own.  Click the step name below to view its results.'),
  ];
  $content['result_tabs'] = [
    '#type' => 'vertical_tabs',
    '#theme_wrappers' => ['vertical_tabs'],
    '#attached' => [
      'js' => [
        'misc/form.js',
        'misc/collapse.js',
        'misc/vertical-tabs.js',
      ],
      'css' => [
        'misc/vertical-tabs.css',
      ],
    ],
    '#children' => '',
  ];

  $has_any_results = FALSE;
  if (is_array($submission->errors)) {
    // If the workflow status is 'Completed' then there will be a history and
    // history contents.  We'll get those out and remove them so we
    // can more easily iterate through the steps.
    if (array_key_exists('history', $submission->errors)) {
      $history = $submission->errors['history'];
      unset($submission->errors['history']);
    }
    if (array_key_exists('history_contents', $submission->errors)) {
      $history_contents = $submission->errors['history_contents'];
      unset($submission->errors['history_contents']);
    }
    ksort($submission->errors);
    foreach ($submission->errors as $step_index => $jobs) {
      $has_step_results = FALSE;

      // Skip steps that have a NULL job.  These are the uploading steps.
      if (count($jobs) == 1 and array_key_exists('NULL', $jobs)) {
        continue;
      }

      // We've changed the way we store analysis results.  So for
      // backwards compatibiity warn the user that then need to update their
      // job status.
      if (array_key_exists('history', $jobs)) {
        if (user_access('administer galaxy')) {
          $content['status_message'] = [
            '#type' => 'markup',
            '#markup' => '<div class="messages error">' .
              t('The job report saved for this analysis is out-of-date. Please update using the following Drush command: ' .
                '<br><br>drush trp-galaxy-status --submission=%sid --force=1 --root=%base_path',
                ['%sid' => $submission->sid, '%base_path' => DRUPAL_ROOT]),
          ];
        }
        continue;
      }

      $step_content = [];
      $job_index = 0;
      foreach ($jobs as $job_id => $logs) {
        $job_index++;

        if ($logs['state'] == 'error') {
          $step_content[$step_index . '_' . $job_id . '_' . $job_index . '_error'] = [
            '#type' => 'fieldset',
            '#title' => $logs['step_name'] . ' on job ' . $job_index . ' (Error)',
            '#collapsed' => TRUE,
            '#collapsible' => TRUE,
            '#attributes' => [
              'class' => ['collapsible', 'collapsed'],
            ],
            '#attached' => [
              'js' => ['misc/collapse.js', 'misc/form.js'],
            ],
          ];
          $step_content[$step_index . '_' . $job_id . '_' . $job_index . '_error']['status'] = [
            '#type' => 'item',
            '#title' => t('Status'),
            '#markup' => $logs['state'],
          ];
          $step_content[$step_index . '_' . $job_id . '_' . $job_index . '_error']['output_log'] = [
            '#type' => 'item',
            '#title' => t('Output Log'),
            '#markup' => '<pre class="tripal-galaxy-workflow-log">' . $logs['stdout'] . '</pre>',
          ];
          $step_content[$step_index . '_' . $job_id . '_' . $job_index . '_error']['error_log'] = [
            '#type' => 'item',
            '#title' => t('Error Log'),
            '#markup' => '<pre class="tripal-galaxy-workflow-log">' . $logs['stderr'] . '</pre>',
          ];
        }

        // In previous versions of this module, the history was stored in
        // every step.  This was inefficient, but for backwards compatibility
        // we will check.
        if (array_key_exists('history', $logs)) {
          $history = $logs['history'];
        }
        if (array_key_exists('history_contents', $logs)) {
          $history_contents = $logs['history_contents'];
        }

        // If we have history contents then we want to display it.
        if (isset($history_contents)) {
          foreach ($history_contents as $index => $history_content) {

            // Skip history items that aren't for this job.
            if ($history_content['creating_job'] != $job_id) {
              continue;
            }

            $has_step_results = TRUE;
            $has_any_results = TRUE;
            $step_content['history_content_' . $step_index . '_' . $job_id . '_' . $index] = [
              '#type' => 'fieldset',
              '#title' => $history_content['name'],
              '#collapsed' => TRUE,
              '#collapsible' => TRUE,
              '#attributes' => [
                'class' => ['collapsible', 'collapsed'],
              ],
              '#attached' => [
                'js' => ['misc/collapse.js', 'misc/form.js'],
              ],
            ];

            switch ($history_content['type']) {
              case 'file':
                if (!isset($history_content['content_link'])) {
                  break;
                }
                $link = $history_content['content_link'];
                $proxy_id = tripal_galaxy_set_proxy_url($link, $galaxy, $history_content, $submission, $node);
                $file_size = tripal_format_bytes($history_content['file_size']);
                $step_content['history_content_' . $step_index . '_' . $job_id . '_' . $index]['download_link'] = [
                  '#type' => 'item',
                  '#title' => t('Download Results'),
                  '#markup' => l($history_content['name'], 'galaxy/download/' . $proxy_id) . ' (' . $file_size . ')',
                ];
                break;
              default:
                break;
            }

            switch ($history_content['extension']) {
              case 'html':
                $url = $galaxy_server->url . $history_content['download_url'];
                $proxy_id = tripal_galaxy_set_proxy_url($url, $galaxy, $history_content, $submission, $node);
                $step_content['history_content_' . $step_index . '_' . $job_id . '_' . $index]['html_view'] = [
                  '#type' => 'item',
                  '#title' => t('View Results'),
                  '#markup' => l($history_content['name'], 'galaxy/viewer/' . $proxy_id),
                  '#description' => '<i>' . t('Note: It may take a few moments for the results page to load.') . '</i>',
                ];
                break;
              default:
                // Any files that are smaller than 1MB can be shown in a browser.
                if ($history_content['file_size'] < pow(10, 6)) {
                  $url = $galaxy_server->url . $history_content['download_url'];
                  $proxy_id = tripal_galaxy_set_proxy_url($url, $galaxy, $history_content, $submission, $node);
                  $step_content['history_content_' . $step_index . '_' . $job_id . '_' . $index]['html_view'] = [
                    '#type' => 'item',
                    '#title' => t('View Results'),
                    '#markup' => l($history_content['name'], 'galaxy/viewer/' . $proxy_id),
                    '#description' => '<i>' . t('Note: It may take a few moments for the results page to load.') . '</i>',
                  ];
                }
                else {
                  $step_content['history_content_' . $step_index . '_' . $job_id . '_' . $index]['html_view'] = [
                    '#type' => 'item',
                    '#title' => t('View Results'),
                    '#markup' => 'Result file is too large to view. Please download.',
                  ];
                }
                $step_content['history_content_' . $step_index . '_' . $job_id . '_' . $index]['peek'] = [
                  '#type' => 'item',
                  '#title' => ('Peek at the results'),
                  '#description' => 'A view of the top of the output file.',
                  '#markup' => $history_content['peek'],
                ];
                break;
            } // end switch ($history_content['extension']) { ...
          } // end foreach ($history_contents as $index => $history_content) { ...
        } // if ($history_contents) { ....
      } // foreach ($jobs as $job_id => $logs) { ...

      if (!$has_step_results) {
        $step_content['no_results'] = [
          '#type' => 'markup',
          '#markup' => t('There are currently no results for this step. The current state of this task is: %status', ['%status' => $logs['state']]),
        ];
      }

      if (user_access('administer galaxy')) {
        $step_content['run_summary'] = [
          '#type' => 'fieldset',
          '#title' => 'Run Details',
          '#collapsed' => TRUE,
          '#collapsible' => TRUE,
          '#attributes' => [
            'class' => ['collapsible', 'collapsed'],
          ],
          '#attached' => [
            'js' => ['misc/collapse.js', 'misc/form.js'],
          ],
        ];

        $step_content['run_summary']['step_id'] = [
          '#type' => 'item',
          '#title' => t('Step ID'),
          '#markup' => $logs['step_id'],
        ];
        $step_content['run_summary']['job_id'] = [
          '#type' => 'item',
          '#title' => t('Job ID'),
          '#markup' => $logs['job_id'] ? $logs['job_id'] : 'N/A',
        ];
        $step_content['run_summary']['state'] = [
          '#type' => 'item',
          '#title' => t('Job State'),
          '#markup' => $logs['state'] == 'error' ? '<font color="red"><b>' . $logs['state'] . '</b></font>' : $logs['state'],
        ];
        $step_content['run_summary']['misc_info'] = [
          '#type' => 'item',
          '#title' => t('Misc Info'),
          '#markup' => $logs['misc_info'],
        ];

        if ($logs['job_id']) {
          $step_content['run_summary']['output_log'] = [
            '#type' => 'item',
            '#title' => t('Output Log'),
            '#markup' => '<pre class="tripal-galaxy-workflow-log">' . $logs['stdout'] . '</pre>',
          ];
          $step_content['run_summary']['error_log'] = [
            '#type' => 'item',
            '#title' => t('Error Log'),
            '#markup' => '<pre class="tripal-galaxy-workflow-log">' . $logs['stderr'] . '</pre>',
          ];
        }
      }
      $step_name = $logs['step_name'];
      $fieldset = [
        '#type' => 'fieldset',
        '#title' => $step_name,
        '#collapsed' => FALSE,
        '#collapsible' => TRUE,
        '#value' => render($step_content),
        '#group' => 'result_tabs',
        '#attributes' => [
          'id' => 'tripal-galaxy-results-fieldset',
        ],
        '#attached' => [
          'js' => ['misc/collapse.js', 'misc/form.js'],
        ],
      ];
      $content['result_tabs']['#children'] .= render($fieldset);
    }
  }

  if ($has_any_results) {
    $content['results'] = [
      '#type' => 'item',
      '#title' => t('Results'),
      '#markup' => t('Expand the fields below to view the status and results of each step in the analysis.'),
    ];
  }
  else {
    $content['results'] = [
      '#type' => 'item',
      '#title' => t('Results'),
      '#markup' => t('Currently, no results exist for this job. The current state of the job is:  %state.', ['%state' => $submission->status]),
    ];
  }

  return $content;

}

/**
 * Retrieves the workflow submission report for an admin user.
 *
 * @param $sid
 */
function tripal_galaxy_submission_admin_report($sid) {

  // Set the breadcrumb.
  $breadcrumb = [];
  $breadcrumb[] = l('Home', '<front>');
  $breadcrumb[] = l('Administration', 'admin');
  $breadcrumb[] = l('Tripal', 'admin/tripal');
  $breadcrumb[] = l('Extensions', 'admin/tripal/extension');
  $breadcrumb[] = l('Galaxy', 'admin/tripal/extension/galaxy');
  $breadcrumb[] = l('Job Queue', 'admin/tripal/extension/galaxy/job-queue');
  drupal_set_breadcrumb($breadcrumb);

  return tripal_galaxy_workflow_report($sid);
}

/**
 * Implements hook_cron().
 */
function tripal_galaxy_cron() {

  $args = [];
  tripal_add_job('Cron: Checking Galaxy workflow status', 'tripal_galaxy',
    'tripal_galaxy_check_status', $args, 1, [], TRUE);

  // TODO: add a setting somewhere to let the user set the date.
  $interval = variable_get('tripal_galaxy_interval', 24 * 60 * 60);

  if (time() >= variable_get('tripal_galaxy_next_execution', 0)) {
    try {
      // Retrieve the list of galaxy servers that have been added and generate
      // the rows for the table.
      $sql = "SELECT * FROM {tripal_galaxy}";
      $results = db_query($sql);

      while ($result = $results->fetchObject()) {
        $server_status = tripal_galaxy_test_connection(array('galaxy_id' => $result->galaxy_id));
        if ($server_status === FALSE) {
          // Update status in the db.
          db_update('tripal_galaxy')
            ->fields(array(
              'serverstatus' => 'unavailable',
            ))
            ->condition('galaxy_id', $result->galaxy_id, '=')
            ->execute();

          // Put a message on the dashboard.
          $title = t('Galaxy Server %servername was unreachable when tested at %time', 
              array('%server' => $result->servername, '%time' => format_date(time())));
          $details = t('Galaxy Server %servername was unreachable when tested at %time ' .
           'Please check the server status. If the server is down you may disable the workflows associated ' .
           'with that server by going to the Tripal Galaxy admin page.', 
            array('%server' => $result->servername, '%time' => format_date(time())));
          $actions['Disable Server\'s Workflows'] = 'admin/tripal/extension/galaxy/disable/' . $result->galaxy_id;
          $type = 'Tripal Galaxy';
          $submitter_id = 'tripal_galaxy' . $result->servername . time();
          tripal_add_notification($title, $details, $type, $actions, $submitter_id);
          // $result->servername,
          // $result->description,
        } 
        else if ($server_status === TRUE) {
          db_update('tripal_galaxy')
            ->fields(array(
              'serverstatus' => 'available',
            ))
            ->condition('galaxy_id', $result->galaxy_id, '=')
            ->execute();

          //Make sure no notification is up about the server being down.
          $submitter_id = 'tripal_galaxy' . $result->servername;
          $note = db_select('tripal_admin_notfications', 'tan')
            ->fields('tan')
            ->condition('submitter_id', $submitter_id, '=')
            ->execute()->fetchAll();
          if ($note) {
            db_delete('tripal_admin_notfications')
              ->condition('submitter_id', $submitter_id)
              ->execute();
          }  
        }   
      }
    } 
    catch (Exception $e) {
      $transaction->rollback();
      drupal_set_message($e->getMessage(), 'error');
      drupal_set_message(t('Cannot disable the workflows'), 'error');
      drupal_goto("/admin/tripal/extension/galaxy/workflows");
      return;
    }
    variable_set('tripal_galaxy_next_execution', time() + $interval);
  }
}

/**
 * Checks the status of non completed workflows.
 *
 * This function is meant to be added by cron and run by the TripalJob's
 * system.
 *
 * @param TripalJob $job
 */
function tripal_galaxy_check_status(TripalJob $job) {
  // Update the status of running workflows
  $query = db_select('tripal_galaxy_workflow_submission', 'tgws');
  $query->fields('tgws', ['sid']);
  $query->condition('tgws.status', ['Error', 'Completed'], 'NOT IN');
  $submissions = $query->execute();
  foreach ($submissions as $submission) {
    tripal_galaxy_check_submission_status($submission->sid);
  }

  // Update the status of the workflows to see if any of them were
  // changed on the galaxy server. If os then that means the workflow we
  // currently have may not work.
  $workflows = db_select('tripal_galaxy_workflow', 'tgw')
    ->fields('tgw')
    ->execute();
  $queue = DrupalQueue::get('check_workflow_status');
  while ($workflow = $workflows->fetchObject()) {
    $queue->createItem($workflow);
  }
}

/**
 * Function call for generating the file(s) to download.
 *
 * @param $links
 *   An associative array of links generated to then query the galaxy server
 *   for (compressed) file(s) to download from the result history of the
 *   workflow.
 *
 * @param
 *   Returns a single prompt to download that given file.
 */
function tripal_galaxy_download_from_links($link_clicked, $links) {

  // Iterate through the $links list looking for the link_clicked key, if it
  // exists generate the prompt for downloading the file(s) to the client.

  // Check if the user clicked the whole history or a history content link.
  // Two different calls for now
  if ($link_clicked == 'whole_history') {

  }

  else {
    if (array_key_exists($link_clicked, $links)) {

    }
  }
}

/**
 * Implements hook_mail().
 */
function tripal_galaxy_mail($key, &$message, $params) {

  $site_name = variable_get('site_name', 'Drupal');

  // Get the submission details.
  $query = db_select('tripal_galaxy_workflow_submission', 'tgws');
  $query->fields('tgws', [
    'galaxy_workflow_id',
    'status',
    'errors',
    'submit_date',
    'start_time',
    'end_time',
  ]);
  $query->join('tripal_galaxy_workflow', 'tgw', 'tgw.galaxy_workflow_id = tgws.galaxy_workflow_id');
  $query->fields('tgw', ['nid', 'galaxy_id']);
  $query->condition('tgws.sid', $params['sid']);
  $submission = $query->execute()->fetchObject();

  // Get the node that this workflow belongs to
  $node = node_load($submission->nid);

  switch ($key) {
    case 'submission-started':
      $message['subject'] = t("Your job at %site_name has started", ['%site_name' => $site_name]);
      $message['body'][] = "You recently submitted a job titled  \"" . $node->title . "\". ";
      $message['body'][] = "This job has started.";
      $message['body'][] = "You may check the status of all submitted jobs in the " .
        l('Galaxy Jobs', '/user/' . $node->uid . '/galaxy-jobs') . ' section of your user account.';
      $message['body'][] = "Thank you.";
      break;
    case 'submission-ended':
      $message['subject'] = t("Your job at %site_name has completed", ['%site_name' => $site_name]);
      $message['body'][] = "You recently submitted a job titled  \"" . $node->title . "\". ";
      $message['body'][] = "This job has completed.";
      $message['body'][] = "You may obtain results of this job in the " .
        l('Galaxy Jobs', '/user/' . $node->uid . '/galaxy-jobs') . ' section of your user account.';
      $message['body'][] = "Thank you.";
      break;
    case 'submission-failed':
      $message['subject'] = t("Your job at %site_name has failed", ['%site_name' => $site_name]);
      $message['body'][] = "You recently submitted a job titled  \"" . $node->title . "\". ";
      $message['body'][] = "This job has failed.";
      $message['body'][] = "You may check the error logs of this job in the " .
        l('Galaxy Jobs', '/user/' . $node->uid . '/galaxy-jobs') . ' section of your user account.';
      $message['body'][] = "Thank you.";
      break;
  }
}


/**
 * Sends an email to the user when a Galaxy job starts.
 *
 * @param $sid
 *   The Submission ID of the job.
 * @param $uid
 *   The User ID of the user to whom the email will go.
 */
function tripal_galaxy_send_submission_start_mail($sid, $uid) {

  $user = user_load($uid);
  $module = 'tripal_galaxy';
  $key = 'submission-started';

  // Specify 'to' and 'from' addresses.
  $to = $user->mail;
  $from = variable_get('site_mail', 'admin@localhost.localdomain');

  // "params" loads in additional context for email content completion in
  // hook_mail(). In this case, we want to pass in the values the user entered
  // into the form, which include the message body in $form_values['message'].
  $params = [
    'sid' => $sid,
  ];

  // The language of the e-mail.
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is called.
  $send = TRUE;

  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] != TRUE) {
    watchdog('tripal_galaxy', t('There was a problem sending your message and it was not sent.'), [], WATCHDOG_ERROR);
  }
}

/**
 * Sends an email to the user when a Galaxy job ends.
 *
 * @param $sid
 *   The Submission ID of the job.
 * @param $uid
 *   The User ID of the user to whom the email will go.
 */
function tripal_galaxy_send_submission_ended_mail($sid, $uid) {

  $user = user_load($uid);
  $module = 'tripal_galaxy';
  $key = 'submission-ended';

  // Specify 'to' and 'from' addresses.
  $to = $user->mail;
  $from = variable_get('site_mail', 'admin@localhost.localdomain');

  // "params" loads in additional context for email content completion in
  // hook_mail(). In this case, we want to pass in the values the user entered
  // into the form, which include the message body in $form_values['message'].
  $params = [
    'sid' => $sid,
  ];

  // The language of the e-mail.
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is called.
  $send = TRUE;

  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] != TRUE) {
    watchdog('tripal_galaxy', t('There was a problem sending your message and it was not sent.'), [], WATCHDOG_ERROR);
  }
}

/**
 * Sends an email to the user when a Galaxy job failes.
 *
 * @param $sid
 *   The Submission ID of the job.
 * @param $uid
 *   The User ID of the user to whom the email will go.
 */
function tripal_galaxy_send_submission_failed_mail($sid, $uid) {

  $user = user_load($uid);
  $module = 'tripal_galaxy';
  $key = 'submission-failed';

  // Specify 'to' and 'from' addresses.
  $to = $user->mail;
  $from = variable_get('site_mail', 'admin@localhost.localdomain');

  // "params" loads in additional context for email content completion in
  // hook_mail(). In this case, we want to pass in the values the user entered
  // into the form, which include the message body in $form_values['message'].
  $params = [
    'sid' => $sid,
  ];

  // The language of the e-mail.
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is called.
  $send = TRUE;

  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] != TRUE) {
    watchdog('tripal_galaxy', t('There was a problem sending your message and it was not sent.'), [], WATCHDOG_ERROR);
  }
}


/**
 * Implements hook_handle_uploaded_file().
 */
function tripal_galaxy_handle_uploaded_file($file, $type) {

  global $user;

  // Split the type into a node ID and form_key
  list($id, $form_key) = explode('-', $type);

  // Add another usage for this module.
  file_usage_add($file, 'tripal_galaxy', $form_key, $id);
 
}

/**
 * Adds a URL to the proxy array.
 *
 * @param $url
 *   The Galaxy URL
 * @param $history_content
 *   The history content that the proxy URL is associated with.
 * @param $submission
 *   An object for the workflow submission.
 * @param $node
 *   The webform node for the workflow.
 */
function tripal_galaxy_set_proxy_url($url, $galaxy, $history_content, $submission, $node) {
  if (!array_key_exists('tripal_galaxy_proxy_urls', $_SESSION)) {
    $_SESSION['tripal_galaxy_proxy_urls'] = [];
  };
  $id = uniqid('TGPX', TRUE);
  $_SESSION['tripal_galaxy_proxy_urls'][$id]['url'] = $url;
  $_SESSION['tripal_galaxy_proxy_urls'][$id]['sid'] = $submission->sid;
  $_SESSION['tripal_galaxy_proxy_urls'][$id]['key'] = $galaxy->getAPIKey();
  $_SESSION['tripal_galaxy_proxy_urls'][$id]['uid'] = $node->uid;
  $_SESSION['tripal_galaxy_proxy_urls'][$id]['name'] = $history_content['name'];
  $_SESSION['tripal_galaxy_proxy_urls'][$id]['file_size'] = $history_content['file_size'];
  return $id;
}

/**
 * Retrieves content from a Galaxy URL and stream it back.
 *
 * @param $proxy_id
 *  A unique ID that maps to a URL.
 */
function tripal_galaxy_stream_url_proxy($proxy_id) {

  $url = $_SESSION['tripal_galaxy_proxy_urls'][$proxy_id]['url'];
  //$url = $url . '?key=' . $_SESSION['tripal_galaxy_proxy_urls'][$proxy_id]['key'];

  $headers = get_headers($url);
  $ch = curl_init();

  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  $output = curl_exec($ch);
  if ($output === FALSE) {
    $error_msg = curl_error($ch);
    $this->error->setError('HTTP', $error_msg);
    return $error_msg;
  }
  curl_close($ch);

  if (!$output) {
    $output = 'The remote Galaxy server returns no display.';
  }
  return $output;
}

/**
 * A generic full page for viewing content from Galaxy.
 *
 * @param $proxy_id
 *  A unique proxy ID that maps to a URL.
 */
function tripal_galaxy_results_viewer_full_page($proxy_id) {
  if (array_key_exists($proxy_id, $_SESSION['tripal_galaxy_proxy_urls'])) {
    $content = tripal_galaxy_stream_url_proxy($proxy_id);
    return $content;
  }
  else {
    $content['name'] = [
      '#type' => 'markup',
      '#markup' => t('This link has expired. Please reload the job results page for uploaded links.'),
    ];
    return $content;
  }
}

/**
 * A generic page for viewing content from Galaxy.
 *
 * @param $proxy_id
 *  A unique proxy ID that maps to a URL.
 */
function tripal_galaxy_results_viewer_page($proxy_id) {

  if (array_key_exists($proxy_id, $_SESSION['tripal_galaxy_proxy_urls'])) {
    $url = $_SESSION['tripal_galaxy_proxy_urls'][$proxy_id]['url'];
    $uid = $_SESSION['tripal_galaxy_proxy_urls'][$proxy_id]['uid'];
    $sid = $_SESSION['tripal_galaxy_proxy_urls'][$proxy_id]['sid'];
    $name = $_SESSION['tripal_galaxy_proxy_urls'][$proxy_id]['name'];

    $content['sub_title'] = [
      '#type' => 'markup',
      '#markup' => '<h2>Viewing results for ' . $name . '</h2>',
    ];
    $content['name'] = [
      '#type' => 'markup',
      '#markup' => l('View full screen', 'galaxy/viewer-full/' . $proxy_id),
    ];
    $content['viewer'] = [
      '#type' => 'item',
      '#markup' => '<iframe src="' . url('galaxy/viewer-full/' . $proxy_id) . '" id="tripal-galaxy-results-viewer-iframe"></iframe>',
    ];

    return $content;
  }
  else {
    $content['name'] = [
      '#type' => 'markup',
      '#markup' => t('This link has expired. Please reload the job results page for uploaded links.'),
    ];
    return $content;
  }
}

/**
 * A generic callback for downloading content from Galaxy.
 *
 * @param $proxy_id
 *  A unique proxy ID that maps to a URL.
 */
function tripal_galaxy_results_download($proxy_id) {
  $url = $_SESSION['tripal_galaxy_proxy_urls'][$proxy_id]['url'];
  //$url = $url . '?key=' . $_SESSION['tripal_galaxy_proxy_urls'][$proxy_id]['key'];

  $headers = get_headers($url);
  foreach ($headers as $header) {
    $results = preg_split('/:/', $header, 2);
    if (count($results) == 2) {
      drupal_add_http_header($results[0], $results[1]);
    }
  }
  print tripal_galaxy_stream_url_proxy($proxy_id);

  exit();
}


/**
 * @param $node
 *
 * a page callback to export galaxy webform as a json file.
 */
function export_tripal_galaxy_workflow($node) {

  $webform = json_encode($node->webform);

  drupal_add_http_header('Content-Type', 'application/json');
  drupal_add_http_header('Content-Disposition', 'attachment; filename="webform-' . $node->type . '-' . $node->nid . '.json";');
  drupal_add_http_header('Content-Length', sprintf('%u', strlen($webform)));

  print($webform);

  exit();

}


/**
 * Implements hook_node_access().
 */
function tripal_galaxy_node_access($node, $op, $account = NULL) {
  if (property_exists($node, 'webform')) {
    if (!empty($node->webform['components'])) {
      $component = current($node->webform['components']);
      if ($component['form_key'] === 'galaxy_webform') {
        return user_access('use galaxy', $account) ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY;
      }
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_views_pre_render().
 * 
 * Hook views pre render to hide the 'View Results', 'Re-Run', and 'View Details' 
 * links in the user workflow listing found on /user/#/galaxy-jobs.
 */
function tripal_galaxy_views_pre_render(&$view) {

  if ($view->name == 'galaxy_usage') {
    if ($view->result[0]->tripal_galaxy_workflow_submission_status == 'deleted') {
      $view->field['ctools_dropdown']->options['fields']['nothing_2'] = null;
      $view->field['ctools_dropdown']->options['fields']['nothing_3'] = null;
      $view->field['ctools_dropdown']->options['fields']['nothing'] = null;
    }
  }
}
